{
  "version": 3,
  "sources": ["../../../../src/handlers/appointment.ts", "../../../../node_modules/uuid/dist/esm/stringify.js", "../../../../node_modules/uuid/dist/esm/rng.js", "../../../../node_modules/uuid/dist/esm/native.js", "../../../../node_modules/uuid/dist/esm/v4.js"],
  "sourcesContent": ["import { APIGatewayProxyHandler } from 'aws-lambda';\r\nimport { DynamoDB, SNS } from 'aws-sdk';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst isOffline = process.env.IS_OFFLINE === 'true';\r\nconst dynamoDb = new DynamoDB.DocumentClient({\r\n    endpoint: isOffline ? 'http://localhost:8000' : undefined,\r\n    region: 'us-east-1',\r\n    accessKeyId: 'fakeMyKeyId',\r\n    secretAccessKey: 'fakeSecretAccessKey',\r\n});\r\n\r\nconst sns = isOffline\r\n  ? {\r\n      publish: async (params: any) => {\r\n        console.log('Mock SNS publish (offline):', JSON.stringify(params));\r\n        return Promise.resolve();\r\n      },\r\n    }\r\n  : new SNS();\r\n  async function publishSNS(snsClient: any, params: any) {\r\n  if (isOffline) {\r\n    return snsClient.publish(params);\r\n  } else {\r\n    return snsClient.publish(params).promise();\r\n  }\r\n}\r\n\r\nexport const handler: APIGatewayProxyHandler = async (event) => {\r\n  console.log('Received event:', JSON.stringify(event));\r\n\r\n  try {\r\n    const body = JSON.parse(event.body || '{}');\r\n    const { insuredId, scheduleId, countryISO } = body;\r\n\r\n    console.log('Parsed body:', { insuredId, scheduleId, countryISO });\r\n\r\n    if (!insuredId || !scheduleId || !countryISO) {\r\n      console.warn('Missing one or more required fields');\r\n      return {\r\n        statusCode: 400,\r\n        body: JSON.stringify({ message: 'Missing fields' }),\r\n      };\r\n    }\r\n\r\n    const appointmentId = uuidv4();\r\n    const createdAt = new Date().toISOString();\r\n\r\n    // Guardar en DynamoDB\r\n    console.log('Before DynamoDB Put');\r\n    await dynamoDb\r\n      .put({\r\n        TableName: 'Appointments',\r\n        Item: {\r\n          id: appointmentId,\r\n          insuredId,\r\n          scheduleId,\r\n          countryISO,\r\n          status: 'pending',\r\n          createdAt,\r\n        },\r\n      })\r\n      .promise();\r\n    console.log('AFTER DynamoDB PUT (saved successfully)');\r\n\r\n    // Elegir el topic SNS\r\n    const topicArn =\r\n      countryISO === 'PE'\r\n        ? process.env.PERU_TOPIC_ARN\r\n        : countryISO === 'CL'\r\n        ? process.env.CHILE_TOPIC_ARN\r\n        : null;\r\n\r\n    if (!topicArn) {\r\n      console.error('Invalid countryISO:', countryISO);\r\n      return {\r\n        statusCode: 400,\r\n        body: JSON.stringify({ message: 'Invalid countryISO' }),\r\n      };\r\n    }\r\n\r\n    // Publicar en SNS\r\n    console.log(`Publishing to SNS topic: ${topicArn}`);\r\n      await publishSNS(sns, {\r\n      TopicArn: topicArn,\r\n      Message: JSON.stringify({\r\n        appointmentId,\r\n        insuredId,\r\n        scheduleId,\r\n        countryISO,\r\n      }),\r\n    });\r\n\r\n    console.log('Appointment processed successfully');\r\n\r\n    return {\r\n      statusCode: 200,\r\n      body: JSON.stringify({\r\n        message: 'Appointment registered, processing',\r\n        appointmentId,\r\n      }),\r\n    };\r\n  } catch (error) {\r\n    console.error('Error in appointment handler:', error);\r\n    return {\r\n      statusCode: 500,\r\n      body: JSON.stringify({ message: 'Internal server error' }),\r\n    };\r\n  }\r\n};\r\n", "import validate from './validate.js';\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n    byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nexport function unsafeStringify(arr, offset = 0) {\n    return (byteToHex[arr[offset + 0]] +\n        byteToHex[arr[offset + 1]] +\n        byteToHex[arr[offset + 2]] +\n        byteToHex[arr[offset + 3]] +\n        '-' +\n        byteToHex[arr[offset + 4]] +\n        byteToHex[arr[offset + 5]] +\n        '-' +\n        byteToHex[arr[offset + 6]] +\n        byteToHex[arr[offset + 7]] +\n        '-' +\n        byteToHex[arr[offset + 8]] +\n        byteToHex[arr[offset + 9]] +\n        '-' +\n        byteToHex[arr[offset + 10]] +\n        byteToHex[arr[offset + 11]] +\n        byteToHex[arr[offset + 12]] +\n        byteToHex[arr[offset + 13]] +\n        byteToHex[arr[offset + 14]] +\n        byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n    const uuid = unsafeStringify(arr, offset);\n    if (!validate(uuid)) {\n        throw TypeError('Stringified UUID is invalid');\n    }\n    return uuid;\n}\nexport default stringify;\n", "import { randomFillSync } from 'crypto';\nconst rnds8Pool = new Uint8Array(256);\nlet poolPtr = rnds8Pool.length;\nexport default function rng() {\n    if (poolPtr > rnds8Pool.length - 16) {\n        randomFillSync(rnds8Pool);\n        poolPtr = 0;\n    }\n    return rnds8Pool.slice(poolPtr, (poolPtr += 16));\n}\n", "import { randomUUID } from 'crypto';\nexport default { randomUUID };\n", "import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\nfunction v4(options, buf, offset) {\n    if (native.randomUUID && !buf && !options) {\n        return native.randomUUID();\n    }\n    options = options || {};\n    const rnds = options.random ?? options.rng?.() ?? rng();\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    rnds[6] = (rnds[6] & 0x0f) | 0x40;\n    rnds[8] = (rnds[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return unsafeStringify(rnds);\n}\nexport default v4;\n"],
  "mappings": "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",
  "names": ["import_crypto"]
}
